{
	"info": {
		"_postman_id": "c0971e41-261d-4b9d-929a-f0f7cbf2b245",
		"name": "ClientBase v5 CRM Project ClientBase v5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23096482"
	},
	"item": [
		{
			"name": "USER",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "CREATE USER",
							"item": [
								{
									"name": "CREATE USER (All fields filled with valid data)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Comment: In this request authorization isn't required. \r",
													"\r",
													"pm.environment.set(\"companyName\", JSON.parse(pm.request.body).companyName)\r",
													"pm.environment.set(\"userFirstName\", JSON.parse(pm.request.body).firstName)\r",
													"pm.environment.set(\"userLastName\", JSON.parse(pm.request.body).lastName)\r",
													"pm.environment.set(\"email\", JSON.parse(pm.request.body).email)\r",
													"pm.environment.set(\"password\", JSON.parse(pm.request.body).password)\r",
													"\r",
													"//TESTS:\r",
													"\r",
													"pm.test(\"Successful POST request\", () => {\r",
													"    pm.expect(pm.response.code.toString()[0]).to.eq('2');\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 201\", () => {\r",
													"    pm.expect(pm.response.code).to.eq(201)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name is Created\", () => {\r",
													"    pm.expect(pm.response.status).to.eq(\"Created\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(responseBody).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(pm.response).to.have.jsonBody\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON\", () => {\r",
													"    pm.expect(typeof(responseBody)).to.eq('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON (another way)\", () => {\r",
													"    pm.expect(responseBody).to.be.a('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message\", () => {\r",
													"    pm.expect(pm.response.json().message).to.eq('User created successfully. Please check your email and verify it')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.include('User created successfully. Please check your email and verify it')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.have.string('User created successfully. Please check your email and verify it')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(responseBody).message).to.eq('User created successfully. Please check your email and verify it')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(pm.response.text()).message).to.eq('User created successfully. Please check your email and verify it')\r",
													"});\r",
													"\r",
													"pm.test(\"Request has headers\", () => {\r",
													"    pm.expect(pm.response.headers).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Request headers is an object\", () => {\r",
													"    pm.expect(pm.response.headers).to.be.an('object')\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is in milliseconds (or less than 1 second)\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response size is in bytes (or less than 1kB)\", () => {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains cookies\", () => {\r",
													"    pm.expect(pm.cookies).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Check the active environment\", () => {\r",
													"  pm.expect(pm.environment.name).to.eq(\"ClientBase v5\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"companyName\": \"{{$randomCompanyName}}\",\r\n    \"firstName\": \"{{$randomFirstName}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}v5/user",
											"host": [
												"{{baseUrl}}v5"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE USER DUPLICATE",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Comment: In this request authorization also isn't required. \r",
													"\r",
													"//TESTS:\r",
													"\r",
													"pm.test(\"Successful POST request\", () => {\r",
													"    pm.expect(pm.response.code.toString()[0]).to.eq('4');\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.expect(pm.response.code).to.eq(409)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name is Created\", () => {\r",
													"    pm.expect(pm.response.status).to.eq(\"Conflict\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(responseBody).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(pm.response).to.have.jsonBody\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON\", () => {\r",
													"    pm.expect(typeof(responseBody)).to.eq('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON (another way)\", () => {\r",
													"    pm.expect(responseBody).to.be.a('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message\", () => {\r",
													"    pm.expect(pm.response.json().message).to.eq('User with this e-mail exists')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.include('User with this e-mail exists')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.have.string('User with this e-mail exists')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(responseBody).message).to.eq('User with this e-mail exists')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(pm.response.text()).message).to.eq('User with this e-mail exists')\r",
													"});\r",
													"\r",
													"pm.test(\"Request has headers\", () => {\r",
													"    pm.expect(pm.response.headers).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Request headers is an object\", () => {\r",
													"    pm.expect(pm.response.headers).to.be.an('object')\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is in milliseconds (or less than 1 second)\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response size is in bytes (or less than 1kB)\", () => {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains cookies\", () => {\r",
													"    pm.expect(pm.cookies).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Check the active environment\", () => {\r",
													"  pm.expect(pm.environment.name).to.eq(\"ClientBase v5\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"companyName\": \"{{companyName}}\",\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}v5/user",
											"host": [
												"{{baseUrl}}v5"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE USER (Not all required fields are filled)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Comment: In this request authorization also isn't required. \r",
													"\r",
													"//TESTS:\r",
													"\r",
													"pm.test(\"Successful POST request\", () => {\r",
													"    pm.expect(pm.response.code.toString()[0]).to.eq('4');\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.expect(pm.response.code).to.eq(404)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name is Created\", () => {\r",
													"    pm.expect(pm.response.status).to.eq(\"Not Found\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(responseBody).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(pm.response).to.have.jsonBody\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON\", () => {\r",
													"    pm.expect(typeof(responseBody)).to.eq('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON (another way)\", () => {\r",
													"    pm.expect(responseBody).to.be.a('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message\", () => {\r",
													"    pm.expect(pm.response.json().message).to.eq('User was not created')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.include('User was not created')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.have.string('User was not created')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(responseBody).message).to.eq('User was not created')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(pm.response.text()).message).to.eq('User was not created')\r",
													"});\r",
													"\r",
													"pm.test(\"Request has headers\", () => {\r",
													"    pm.expect(pm.response.headers).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Request headers is an object\", () => {\r",
													"    pm.expect(pm.response.headers).to.be.an('object')\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is in milliseconds (or less than 1 second)\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response size is in bytes (or less than 1kB)\", () => {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains cookies\", () => {\r",
													"    pm.expect(pm.cookies).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Check the active environment\", () => {\r",
													"  pm.expect(pm.environment.name).to.eq(\"ClientBase v5\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"companyName\": \"{{$randomCompanyName}}\",\r\n    \"firstName\": \"{{}}\",\r\n    \"lastName\": \"{{$randomLastName}}\",\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"password\": \"{{$randomPassword}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}v5/user",
											"host": [
												"{{baseUrl}}v5"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE USER (No field is filled)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Comment: In this request authorization also isn't required. \r",
													"\r",
													"//TESTS:\r",
													"\r",
													"pm.test(\"Successful POST request\", () => {\r",
													"    pm.expect(pm.response.code.toString()[0]).to.eq('4');\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.expect(pm.response.code).to.eq(400)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name is Created\", () => {\r",
													"    pm.expect(pm.response.status).to.eq(\"Bad Request\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(responseBody).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(pm.response).to.have.jsonBody\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON\", () => {\r",
													"    pm.expect(typeof(responseBody)).to.eq('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON (another way)\", () => {\r",
													"    pm.expect(responseBody).to.be.a('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message\", () => {\r",
													"    pm.expect(pm.response.json().message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.include('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.have.string('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(responseBody).message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(pm.response.text()).message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Request has headers\", () => {\r",
													"    pm.expect(pm.response.headers).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Request headers is an object\", () => {\r",
													"    pm.expect(pm.response.headers).to.be.an('object')\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is in milliseconds (or less than 1 second)\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response size is in bytes (or less than 1kB)\", () => {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains cookies\", () => {\r",
													"    pm.expect(pm.cookies).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Check the active environment\", () => {\r",
													"  pm.expect(pm.environment.name).to.eq(\"ClientBase v5\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"companyName\": \"{{}}\",\r\n    \"firstName\": \"{{}}\",\r\n    \"lastName\": \"{{}}\",\r\n    \"email\": \"{{}}\",\r\n    \"password\": \"{{}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}v5/user",
											"host": [
												"{{baseUrl}}v5"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "CREATE USER (Empty JSON)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Comment: In this request authorization also isn't required. \r",
													"\r",
													"//TESTS:\r",
													"\r",
													"pm.test(\"Successful POST request\", () => {\r",
													"    pm.expect(pm.response.code.toString()[0]).to.eq('4');\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is 409\", () => {\r",
													"    pm.expect(pm.response.code).to.eq(400)\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name is Created\", () => {\r",
													"    pm.expect(pm.response.status).to.eq(\"Bad Request\")\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(responseBody).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Response has body\", () => {\r",
													"    pm.expect(pm.response).to.have.jsonBody\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON\", () => {\r",
													"    pm.expect(typeof(responseBody)).to.eq('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response body is JSON (another way)\", () => {\r",
													"    pm.expect(responseBody).to.be.a('string')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message\", () => {\r",
													"    pm.expect(pm.response.json().message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.include('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(pm.response.text()).to.have.string('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(responseBody).message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains a specific message (another way)\", () => {\r",
													"    pm.expect(JSON.parse(pm.response.text()).message).to.eq('Wrong password format')\r",
													"});\r",
													"\r",
													"pm.test(\"Request has headers\", () => {\r",
													"    pm.expect(pm.response.headers).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Request headers is an object\", () => {\r",
													"    pm.expect(pm.response.headers).to.be.an('object')\r",
													"});\r",
													"\r",
													"pm.test(\"Response time is in milliseconds (or less than 1 second)\", () => {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response size is in bytes (or less than 1kB)\", () => {\r",
													"    pm.expect(pm.response.responseSize).to.be.below(1000);\r",
													"});\r",
													"\r",
													"pm.test(\"Response contains cookies\", () => {\r",
													"    pm.expect(pm.cookies).not.to.be.undefined\r",
													"});\r",
													"\r",
													"pm.test(\"Check the active environment\", () => {\r",
													"  pm.expect(pm.environment.name).to.eq(\"ClientBase v5\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}v5/user",
											"host": [
												"{{baseUrl}}v5"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "EMAIL VERIFICATION",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const responseData = JSON.parse(responseBody),\r",
											"    str = responseData.payload.items[0].message,\r",
											"    endPoint = str.split('\\n')[4].split('https://clientbase.us/')[1]\r",
											"    \r",
											"emailRequest = {\r",
											"    url: environment.baseUrl+endPoint,\r",
											"    method: 'GET',\r",
											"};\r",
											"pm.sendRequest(emailRequest);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}email/search",
									"host": [
										"{{baseUrl}}email"
									],
									"path": [
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "LOGIN",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"token\", JSON.parse(responseBody).payload.token)\r",
											"pm.environment.set(\"userId\", JSON.parse(responseBody).payload.user._id)\r",
											"pm.environment.set(\"companyId\", JSON.parse(responseBody).payload.user.companyAccount)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\",\r\n    \"password\": \"{{password}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/user/login",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "LIST OF ALL USERS",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/user/search",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"search"
									],
									"query": [
										{
											"key": "pageCurrent",
											"value": "2",
											"disabled": true
										},
										{
											"key": "limit",
											"value": "20",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "-1",
											"disabled": true
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "ALL USERS with changed limit",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"limit\": 100\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/user/search",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "COMPANY SALES",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/report/companySales",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"report",
										"companySales"
									]
								}
							},
							"response": []
						},
						{
							"name": "PERSONAL SALES",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/report/personalSales",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"report",
										"personalSales"
									]
								}
							},
							"response": []
						},
						{
							"name": "RESET USER PASSWORD",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"{{email}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v5/user/password/reset/request",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"password",
										"reset",
										"request"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "USER AUTH by token",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}v5/user/auth",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"auth"
									]
								}
							},
							"response": []
						},
						{
							"name": "USER PROFILE by id",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}v5/user/{{userId}}",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "COMPANY ACCOUNT by id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.environment.set(\"companyName\", JSON.parse(responseBody).payload.companyName)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}v5/company/{{companyId}}",
									"host": [
										"{{baseUrl}}v5"
									],
									"path": [
										"company",
										"{{companyId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "PATCH",
					"item": [
						{
							"name": "UPDATE USER PROFILE",
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"Alex\",\r\n    \"lastName\": \"Smith\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}v4/user/{{userId}}",
									"host": [
										"{{baseUrl}}v4"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "USER",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}v4/user/{{userId}}",
									"host": [
										"{{baseUrl}}v4"
									],
									"path": [
										"user",
										"{{userId}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}